'''
Списки  [] ___________________________________________
 
 Создание списков:
'''
# 1 Способ:

list_1 = [] # Создали пустой список

# 2 Способ:

list_1 = list() # Создали ф-ю list, которая будет создовать спсок
print(list_1) # выдает результат с пустыми []
list_1 = [1, 2, 3, 8]
print(*list_1) # Выводит результат в [], используйте * перед названием, чтобы ввыводить результат без скобок и символов


# цикл for

for i in list_1:
    print(i) # Выводит все значения списка поочередно с новой строки



print(len(list_1)) # Показывает размер списка
print(list_1[3]) # Вывод определенного элемнта списка. в [] указывается номер эл-та
print(list_1[-1]) # Вывод эл-та списка с конца. т.е. Первый эл-т с конца

'''
Дбавление значений в список
'''
list_1 = [1, 5]
print(list_1)
# ф-я .append позволяет добивить какой-то эл-т в конец списка
list_1.append(85)
print(list_1)

list_1 = [] # Создали пустой список
print(list_1)
for i in range(5): # цикл создает 5 пустых значений
    list_1.append(i) # при каждой этарации цикла for к списку будет добавлятся значение i
    print(list_1)

'''
Функции в Списках
'''
# Удаление последнего элемента списка, ф-я .pop
list_1 = [12, 7, -1, 21, 0]
a = list_1.pop() # Ф-я .pop возвращает удаленный эл-т
print(a) # 0

print(list_1) # выводится [12, 7, -1, 21]
print(list_1.pop()) # удаляет 21
print(list_1) # [12, 7, -1]
print(list_1.pop()) # -1
print(list_1) # [12, 7]

# Удаление конкретного эл-та из списка

list_1 = [12, 7, -1, 21, 0]
print(list_1.pop(1)) # удаляем элемент с индексом 1
print(list_1)

# Добавление элемента на нужную позицию. Ф-я .insert
list_1 = [12, 7, -1, 21, 0]
print(list_1.insert(2, -11)) # 1-й аргумент позиция куда вставляем э-т, 2-й арг. значение э-та
print(list_1) # [12, 7, -11, -1, 21, 0]

'''
Работа со всписками в срезах
'''
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[0]) # выводится эл-т с индексом 0 # 1
print(list_1[1]) # 2
print(list_1[len(list_1)-1]) # выводится последний эл-т # 10
print(list_1[-1]) # так же выводится последний эл-т # 10
print(list_1[-5]) # выводит 5-й эл-т с конца # 6
print(list_1[:]) # выводит весь список с начала до конца # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[:2]) # выводит список с начала до 2-го индекса # [1, 2]
print(list_1[len(list_1)-2:]) # выводит 2-а эл-та списка с конца [9, 10]
print(list_1[2:9]) # выводит интервал от 2-го до 9-го индекса # [3, 4, 5, 6, 7, 8, 9]
print(list_1[2:-18]) # []
print(list_1[0:len(list_1):6]) # выводит с начала списка до конца с шагом 6 # [1, 7]
print(list_1[::6]) # тоже самое

'''
КОРТЕЖИ () __________________________________________
'''
t = () # создали пустой кортеж
print(type(t)) # вывели тип данных "tuple"(кортеж)

t = (1 )
print(type(t))# интерпретаор поменял тип данных на int
t = (1, 4, 3,)# указали значения кортежа но в коце нужно оставить " , "
print(t)
print(type(t)) # class 'tuple'

v = [1, 8, 9] # создали список
print(v)
print(type(v)) # вывели тип данных # class 'list'

v = tuple(v) # Преобразовали список в кортеж
print(v)
print(type(v)) # class 'tuple'

# Множественное присваивание

a, b = 1, 2
a = b = 1

a,b,c = v

print(a, b, c) # вывели в отделных переменных(сделали распаковку кортежа)



t = (1, 2, 3, 5,)

print(t[1]) # вывели эл-т и индексом 1

for i in t: # c помощью цикла for прошли по всем эл-м
    print(i) # вывелыи все эл-ты поочередно в столбик

for i in range(len(t)):
    print(t[i])



t[0] = 2
print(t)
# операция замены элемента сработает со списком но не сработает с кортежем



'''
Словари {} _________________________________________________________________
'''

d = {} # создали пустой словарь
d = dict() # d также будет являться словарем
# Добавление значений

d['q'] = 'qwerty'  # создали ключ 'q'
print(d) # 'q': 'qwerty' (в нашем словере есть ключ 'q' по которому мы получим 'qwerty' )
d['w'] = 'werty' # к словарю добавили ключ 'w'
print(d) # {'q': 'qwerty', 'w': 'werty'} в словаре теперь два ключа
print(d['q']) # выводит qwerty по ключю 'q'

#пример
dictionary = {} # Создали пустой словарь
dictionary = {'up': '↑', 'left':'←', 'down':'↓', 'right':'→'} # Пересоздали словарь и сразу указали значения
print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
print(dictionary['left']) # ← 
# типы ключей могут отличаться
print(dictionary['up'])
# типы ключей могут отличаться
dictionary['left'] = '⇐'
print(dictionary['left']) # ← 
print(dictionary['type']) # KeyError: 'type'
del dictionary['left'] # удаление элемента
for item in dictionary: # for (k, v) in dictionary.items():
print('{}: {}'.format(item, dictionary[item])) # Выводим ключ(item), обращаемся к словарю(dictionary) и выводим значение[item]
    print(item) # Выводит ключи
    
for (k, v) in dictionary.items(): # к- это ключь, v - это значение
    print(k, v)
    
dictionary[895] = 98998
print(dictionary)

# Фун-я dictionary.items():

print(dictionary.items()) # выводит список где каждый эл-т явл-ся кортежем из 2-х значений(1-е ключ, 2-е значение из словаря)

'''
МНОЖЕСТВА {}
'''

colors = {'red', 'green', 'blue'} # создали множество
print(colors) # {'red', 'green', 'blue'}
colors.add('red') # добавляет значение уже имеющееся значение то ни чего не добавляются)
print(colors) # {'red', 'green', 'blue'}
colors.add('gray') # добавляет новое значение к множеству
print(colors) # {'red', 'green', 'blue', 'gray'}
colors.remove('red') # удаляет значение из множества
print(colors) # {'green', 'blue', 'gray}
# colors.remove('red') # KeyError: red' ошибка удаления так как уже удалили
colors.discard('red') # ok # Проверяет если значение во множестве, если есть то удаляет
print(colors) # {'green', 'blue', 'gray}
colors.clear() # { } # удаляет все значения множества
print(colors) # set()

q = set() # Создает множество

'''
Операции со Множествами ____________________________
'''
a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
c = a.copy() # в переменную с копирует множество a # c = {1, 2, 3, 5, 8}
u = a.union(b) # объединяет только уникальные значения множеств a и b # {1, 2, 3, 5, 8, 13, 21}
i = a.intersection(b) # Находит пересечения(т.е. значения которые есть в обоих множествах) # i = {8, 2, 5}
d1 = a.difference(b) # Находит разность a - b (т.е. вычитает все значения из множества a которые есть во множестве  b) # d1 = {1, 3}
dr = b.difference(a) # Находит разность b - a (т.е. вычитает все значения из b, которые есть в b) # dr = {13, 21}

q=a.union(b).difference(a.intersection(b)) 
# 1. Сначала находит пересечения (a.intersection(b))
# 2. Потом a объединяет с b "a.union(b)"
# 3. Затем из полученного множества находит разность с первым множеством (a.intersection(b))

'''
создание замороженного множества
'''
a = {1, 8, 6} # создаем множество с некоторыми значеничми
b = frozenset(a) # создаем множество b которое замораживет множество  a
# т.е. мы не сможем его изменять

print(b) # frozenset({8, 1, 6}) # Показывает, что множество замороженно



'''
Профилирование и отладка

Виды ошибок:
'''
# SyntaxError (Синтаксическая ошибка)

number_first = 5
number_second = 7
if number_first > number_second # не поставили ":"
    print(number_first)

# IndentationError: expected an indented block after  (Ошибка отступов)

number_first = 5
number_second = 7
if number_first > number_second:
print(number_first) # Не поставили отступ

# TypeError (Типовая ошибка)
text = 'python'
number = 5 # Чтобы исправить int меняем на строку # number = '5'
print(text + number)
# Нельзя складывать строки и числа

# ZeroDivisionError ( Деление на ноль)
number_first = 5
number_second = 0
print(number_first // number_second)
# Делить на ноль нельзя

# KeyEroor( Ошбилка ключа)
dictionary = {1: 'Monday', 2: 'Tuesday'}
print(dictionary[3]) # !!!!!!
# Такого ключа не существует

# NameError( Ошбибка имени переменной)
name = 'Ivan'
print(names) # написали names вместо name
# Переменной names несуществует

# ValueError : invalid literal for int()( Ошибка значений)
text = 'Python'
print(int(text))
# Нельзя символы привести в целые значения

